import cv2
import numpy as np

drawing = False
rectangle = 0       #設定框選區域初始值
rectangle_1 = 0

#角點偵測副程式
def keypoint(input_img):
    
    feature_params = dict(maxCorners=500,       #設定角點偵測函數
                          qualityLevel=0.3,
                          minDistance=7,
                          blockSize=7,
                          useHarrisDetector=False,
                          k=0.04)
    
    corners = cv2.goodFeaturesToTrack(input_img ,**feature_params)
    corners = np.int0(corners)                  #使其化為整數
    
    #print('corners=' ,corners)
    return corners

#劃出角點之副程式
def draw_point(input_img ,kp ,ix ,iy, x, y):
    
    for i in kp:
        n,m = i.ravel()                         #使kp內的值返回
        n = n + ix
        m = m + iy
        cv2.circle(input_img ,(n,m) ,2 ,(255,0,0) ,2)
        cv2.rectangle(input_img,(ix,iy),(x,y),(0,255,255),1)              #起始值ix,iy 終點x,y
                
    return input_img

def draw_point_1(input_img ,kp ,ix ,iy, x, y):
    
    for i in kp:
        n,m = i.ravel()                         #使kp內的值返回
        n = n + ix
        m = m + iy
        cv2.rectangle(input_img,(ix,iy),(x,y),(0,255,255),1)              #起始值ix,iy 終點x,y
                
    return input_img

def ROIimg(ix,iy,x,y,input_img):
    
    roiimg = input_img[iy:y, ix:x]

    mask = np.zeros_like(input_img)
    mask[iy:y, ix:x] = roiimg
    
    return mask


def ROI_point(kp, ix, iy):
    
    
    kp[:, 0, 0] = kp[:, 0, 0] +ix
    kp[:, 0, 1] = kp[:, 0, 1] +iy
      

    return kp

def lk_track(old_input, old, new, kp, frame):           #抓img 但抓下一幀時抓的是全圖
    
#    vis = frame.copy()        
    
    color = np.random.randint(0,255,(100,3))
    
    lk_params = dict( winSize=(15,15),     
              maxLevel=2,     
              criteria=(cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT,10, 0.03))

    
    mask = np.zeros_like(old_input)
    
    kp = np.float32(kp).reshape(-1, 1, 2)
    
    p0,  st,  err  =  cv2.calcOpticalFlowPyrLK(old, new, kp, None, **lk_params)
    kpr,  st,  err  =  cv2.calcOpticalFlowPyrLK(new, old, p0, None, **lk_params)

#==============================================================================
#     d = abs(kp-kpr).reshape(-1, 2).max(-1)
#     good = d < 1    
#     new_tracks = []
#     for tr, (x, y), good_flag in zip(kp, p0.reshape(-1, 2), good):
#         if not good_flag:
#             continue
#         tr.append((x, y))
#         if len(tr) > 10:
#             del tr[0]
#         new_tracks.append(tr)
#         cv2.circle(vis, (x, y), 2, (0, 255, 0), -1)
#         print(tr)
#==============================================================================
    
    
    good_new = p0[st==1]
    good_old = kp[st==1]

    for i,(new,old) in enumerate(zip(good_new, good_old)):
        a,b = new.ravel()
        c,d = old.ravel()
        cv2.arrowedLine(mask,(c,d),(a,b),(0,255,0),2)
        cv2.circle(frame,(a,b),2, color[i].tolist(),2)

    
               
    new_input = cv2.add(frame, mask)
   
    return new_input

#畫方框之副程式
def draw_circle(event,x,y,flags,param):
    
    global ix,iy,drawing,rectangle
    #滑鼠按下
    if event == cv2.EVENT_LBUTTONDOWN:
        drawing = True
        ix,iy = x,y
        #print('ix=',ix)
        #print('iy=',iy)
    #滑鼠放開    
    elif event == cv2.EVENT_LBUTTONUP:
        drawing = False
        
        #cv2.rectangle(img,(ix,iy),(x,y),(0,255,255),1)              #起始值ix,iy 終點x,y
        #print('x=',x)
        #print('y=',y)
        rectangle = [ix, iy, x, y]          #rectangle內將有4個值
        
img = cv2.imread('a.jpg')
cv2.namedWindow('image')
cv2.setMouseCallback('image',draw_circle)

while(1):
    k = cv2.waitKey(1) & 0xff
    cv2.imshow('image',img)
    #print("rectangle:",rectangle)
    if k == 27 or rectangle !=0:            #畫框完跳出此副程式
        break
cv2.destroyAllWindows

#畫影像二方格
def draw_circle_1(event,x,y,flags,param):
    
    global ix,iy,drawing,rectangle_1
    #滑鼠按下
    if event == cv2.EVENT_LBUTTONDOWN:
        drawing = True
        ix,iy = x,y
        #print('ix=',ix)
        #print('iy=',iy)
    #滑鼠放開    
    elif event == cv2.EVENT_LBUTTONUP:
        drawing = False
        
        cv2.rectangle(img_1,(ix,iy),(x,y),(0,255,255),1)              #起始值ix,iy 終點x,y
        #print('x=',x)
        #print('y=',y)
        rectangle_1 = [ix, iy, x, y]          #rectangle內將有4個值
        
img_1 = cv2.imread('b.jpg')
cv2.namedWindow('image_1')
cv2.setMouseCallback('image_1',draw_circle_1)

while(1):
    k = cv2.waitKey(1) & 0xff
    cv2.imshow('image_1',img_1)
    #print("rectangle_1:",rectangle_1)
    if k == 27 or rectangle_1 !=0:            #畫框完跳出此副程式
        break
cv2.destroyAllWindows


#==============================================================================
# 主程式
#==============================================================================
img = cv2.imread('a.jpg')
img_1 = cv2.imread('b.jpg')

#將四點提出 影像一
ix = rectangle[0]
iy = rectangle[1]
x = rectangle[2]
y = rectangle[3]

#影像二
ix_1 = rectangle_1[0]
iy_1 = rectangle_1[1]
x_1 = rectangle_1[2]
y_1 = rectangle_1[3]


#做角點前先轉為灰階圖  影樣一
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
gray = cv2.equalizeHist(gray)

#影像二
gray_1 = cv2.cvtColor(img_1, cv2.COLOR_BGR2GRAY)
gray_1 = cv2.equalizeHist(gray_1)


roiimg = gray[iy:y, ix:x]       #ROI作圖  影像一
roiimg_1 = gray_1[iy_1:y_1, ix_1:x_1]       #影像二

#==============================================================================
# #==============================================================================
# # show roi
# #==============================================================================
# cv2.namedWindow('roiimg')
# cv2.imshow('roiimg',roiimg)
#==============================================================================

kp = keypoint(roiimg)           #尋找角點   影像一
kp_1 = keypoint(roiimg_1)       #影像二

               
img = draw_point(img, kp, ix, iy, x, y)       #劃出角點位置  影像一
img_1 = draw_point_1(img_1, kp_1, ix_1, iy_1, x_1, y_1)   #影像二
img_2 = ROIimg(ix_1, iy_1, x_1, y_1, img_1)

gray_2 = cv2.cvtColor(img_2, cv2.COLOR_BGR2GRAY)
gray_2 = cv2.equalizeHist(gray_2)

                 

p0 = ROI_point(kp, ix, iy)
#print('p0 = ',p0)

img_2 = lk_track(img, gray, gray_2, p0, img_1)

#while(1):
k = cv2.waitKey(1) & 0xff
cv2.namedWindow('image')
cv2.imshow('image',img)

cv2.namedWindow('image_1')
cv2.imshow('image_1',img_1)

img_2 = img//2 + img_2//2  #為什麼會這樣

cv2.namedWindow('image_2') 
cv2.imshow('image_2',img_2)

k = cv2.waitKey(1)
if k == 27:
    cv2.destroyAllWindows

